// Load the Gmail API client
gapi.load('client:auth2', initClient);

// Initialize the Gmail API client
function initClient() {
  gapi.client.init({
    apiKey: 'YOUR_API_KEY',
    clientId: 'YOUR_CLIENT_ID',
    discoveryDocs: ['https://www.googleapis.com/discovery/v1/apis/gmail/v1/rest'],
    scope: 'https://www.googleapis.com/auth/gmail.readonly',
  }).then(function() {
    // Listen for sign-in state changes
    gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);

    // Handle the initial sign-in state
    updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
  });
}

// Handle the sign-in status changes
function updateSigninStatus(isSignedIn) {
  if (isSignedIn) {
    // User is signed in, fetch the list of emails
    listEmails();
  } else {
    // User is not signed in, display the sign-in button
    document.getElementById('signin-button').style.display = 'block';
  }
}

// Sign in the user
function signIn() {
  gapi.auth2.getAuthInstance().signIn();
}

// Fetch the list of emails
function listEmails() {
  gapi.client.gmail.users.messages.list({
    userId: 'me',
  }).then(function(response) {
    var emails = response.result.messages;
    // Process the list of emails
    console.log(emails);
  }, function(error) {
    console.error('Error fetching emails:', error);
  });
}


Before using this code, you'll need to set up a project in the Google Cloud Console and enable the Gmail API. Replace 'YOUR_API_KEY' with your API key and 'YOUR_CLIENT_ID' with your client ID.

Additionally, you'll need to add the necessary HTML elements to display the sign-in button and handle user interactions:


<button id="signin-button" onclick="signIn()">Sign In</button>


Make sure to include the Google API client library in your HTML file by adding the following script tag:


<script src="https://apis.google.com/js/api.js"></script>


Remember to replace the example code with your own logic to handle and display the emails in your notebook.
